

https://fastapi.tiangolo.com/tutorial/first-steps/#path


Operação¶
"Operação" aqui se refere a um dos "métodos" HTTP.

Um dos seguintes:

POST
GET
PUT
DELETE
... e os mais exóticos:

OPTIONS
HEAD
PATCH
TRACE

Ao criar APIs, você normalmente usa esses métodos HTTP específicos para executar uma ação específica.

Normalmente você usa:

POST: para criar dados.
GET: para ler dados.
PUT: para atualizar os dados.
DELETE: para excluir dados.

Você também pode usar as outras operações:

@app.post()
@app.put()
@app.delete()
E os mais exóticos:

@app.options()
@app.head()
@app.patch()
@app.trace()

Categorias de status codes:

1xx (Informativos): A solicitação foi recebida e o processamento continua.
2xx (Sucesso): A solicitação foi bem-sucedida.
3xx (Redirecionamento): É necessária uma ação adicional para concluir a solicitação.
4xx (Erro do cliente): A solicitação contém erros ou não pode ser atendida.
5xx (Erro do servidor): O servidor falhou ao processar a solicitação.
Status codes mais comuns:

200 OK: A solicitação foi bem-sucedida.
201 Created: A solicitação foi bem-sucedida e um novo recurso foi criado.
204 No Content: A solicitação foi bem-sucedida, mas não há conteúdo para retornar.   
400 Bad Request: A solicitação não pôde ser entendida pelo servidor devido a sintaxe inválida.
401 Unauthorized: A solicitação requer autenticação.
403 Forbidden: O cliente não tem permissão para acessar o recurso solicitado.
404 Not Found: O recurso solicitado não foi encontrado.
500 Internal Server Error: O servidor encontrou um erro interno e não pôde concluir a solicitação.   
Importância dos status codes:

Os status codes são essenciais para a comunicação entre clientes e servidores na web.
Eles permitem que os clientes entendam o resultado de suas solicitações e tomem as medidas apropriadas.
Eles também são importantes para o SEO, pois os mecanismos de pesquisa usam os status codes para indexar e classificar páginas web.

Fontes e conteúdo relacionado


*************************************************************

cd /dio/py/ForPytBacDev/10APIsAssincronasEmPythonComFastAPI/
 -> poetry new dio-blog-package
 cd /dio/py/ForPytBacDev/10APIsAssincronasEmPythonComFastAPI/dio-blog-package
 -> poetry add 'fastapi=*'
 -> poetry add "uvicorn[standard]"
 -> poetry add "pydantic=*"
 -> poetry add "pydantic-settings=*"
 -> poetry add "pyjwt=*"
 -> poetry add "psycopg2-binary=*"
 -> poetry add "alembic=*"
  
 -> poetry add --group dev 'pytest=*' 'pytest-mock=*' 'flake8=*' 'mypy=*'
 -> poetry add --group dev 'httpx=*'
 -> poetry add --group dev 'ipython=*' 'isort=*' 'black=*' 'autopep8=*' 'pylint=*'
 -> poetry add --group dev 'pytest-asyncio=*'
 -> poetry add --group dev 'pre-commit=*' # ajudar commit 
 ->  poetry add --group dev 'bandit=*'

ativar ambiente virtual

-> pip freeze > requirements.txt

-- > eval $(poetry env activate)

-- > deactivate : sair do comando virtual do poetry :: https://python-poetry.org/docs/managing-environments/#activating-the-environment

 -> poetry env info
 
ge$ poetry env info

Virtualenv
Python:         3.11.11
Implementation: CPython
Path:           /home/eduardof/.cache/pypoetry/virtualenvs/dio-blog-package-eNGemt7c-py3.11  ## -- RECOMENDADO
Executable:     /home/eduardof/.cache/pypoetry/virtualenvs/dio-blog-package-eNGemt7c-py3.11/bin/python
Valid:          True

Base
Platform:   linux
OS:         posix
Python:     3.11.11
Path:       /home/eduardof/.pyenv/versions/3.11.11
Executable: /home/eduardof/.pyenv/versions/3.11.11/bin/python3.11


 
 -> abrir vs code : code. 
 
 
 -> poetry env activate
 
 
 
 
|Característica	|PUT									|PATCH
|Intenção		|Substituir o recurso completamente		|Aplicar modificações parciais ao recurso
|Dados Enviados	|Representação completa do recurso		|Apenas as alterações a serem aplicadas
|Criação		|Pode criar se o recurso não existir	|Geralmente não cria um novo recurso
|Idempotência	|Geralmente idempotente					|Geralmente não é estritamente idempotente



pyjwt